#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_ray_tracing: require
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_samplerless_texture_functions: require

#include "rt_payload.glsl"
#include "rt_descriptors.glsl"
#include "colormap.glsl"

#pragma MDL_GENERATED_CODE

#include "rt_shading_state.glsl"

#ifndef SHADOW_TEST
layout(location = 0) rayPayloadInEXT RayPayload rayPayload;
#else
layout(location = 1) rayPayloadInEXT ShadowRayPayload rayPayload;
#endif

hitAttributeEXT vec2 baryCoord;

void main()
{
  State shading_state;
  vec2 hit_bc = baryCoord;
  uint hit_face_idx = gl_InstanceCustomIndexEXT + gl_PrimitiveID;
  setup_mdl_shading_state(hit_face_idx, hit_bc, gl_WorldRayDirectionEXT, shading_state);

  float opacity = mdl_cutout_opacity(shading_state);

#if AOV_ID == AOV_ID_DEBUG_OPACITY
  rayPayload.radiance = (opacity == 0.0) ? vec3(1.0) : colormap_viridis(opacity);
  rayPayload.bitfield = 0xFFFFFFFFu;
  return;
#endif

#ifdef RAND_4D
  float k = rng4d_next(rayPayload.rng_state).x;
#else
  float k = rng_next(rayPayload.rng_state);
#endif
  if (k > opacity)
  {
    ignoreIntersectionEXT;
  }
}
