#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_ray_tracing: require
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_samplerless_texture_functions: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#extension GL_EXT_shader_explicit_arithmetic_types_int16: require

#include "rt_payload.glsl"
#include "rt_descriptors.glsl"

#pragma MDL_GENERATED_CODE

#include "rt_shading_state.glsl"

layout(location = PAYLOAD_INDEX_SHADE) rayPayloadInEXT ShadeRayPayload rayPayload;

hitAttributeEXT vec2 baryCoord;

bool russian_roulette(in float random_float, inout vec3 throughput)
{
    float max_throughput = max(throughput.r, max(throughput.g, throughput.b));
    float p = min(max_throughput, PC.rrInvMinTermProb);

    if (random_float > p)
    {
        return true;
    }

    throughput /= p;

    return false;
}

void sampleLight(vec4 k4, vec3 surfacePos, out vec3 dirToLight, out float dist, out vec3 power, out float pdf)
{
    uint totalLightCount = SPHERE_LIGHT_COUNT + DISTANT_LIGHT_COUNT + RECT_LIGHT_COUNT;

#if SPHERE_LIGHT_COUNT > 0
    if ((k4.x * totalLightCount) <= SPHERE_LIGHT_COUNT)
    {
        uint lightIndex = min(uint(k4.y * SPHERE_LIGHT_COUNT), SPHERE_LIGHT_COUNT - 1);

        SphereLight light = sphereLights[lightIndex];

        float samplePdf = 1.0;
        vec3 samplePos = light.pos;
        if (light.radius > 0.0)
        {
            // TODO: sample solid angle of sphere light
            // https://schuttejoe.github.io/post/arealightsampling/
            samplePos += sample_sphere(k4.zw, light.radius, samplePdf);
        }

        vec3 dir = samplePos - surfacePos;
        dist = length(dir);
        dirToLight = dir / dist;

        float cosTheta = (light.radius > 0.0) ? max(0.0, (dot(normalize(samplePos - light.pos), -dirToLight))) : 1.0;
        float geometryTerm = cosTheta / (dist * dist);

        power = light.baseEmission * PC.lightIntensityMultiplier * geometryTerm;
        pdf = samplePdf;
    }
#endif
#if DISTANT_LIGHT_COUNT > 0
    else if ((k4.x * totalLightCount) <= (SPHERE_LIGHT_COUNT + DISTANT_LIGHT_COUNT))
    {
        uint lightIndex = min(uint(k4.y * DISTANT_LIGHT_COUNT), DISTANT_LIGHT_COUNT - 1);

        DistantLight light = distantLights[lightIndex];

        dist = 100000.0;
        dirToLight = -light.direction;
        power = light.baseEmission * PC.lightIntensityMultiplier;
        pdf = 1.0;

        if (light.angle > 0.0)
        {
            vec3 t1, t2;
            orthonormal_basis(dirToLight, t1, t2);

            // https://math.stackexchange.com/questions/56784/generate-a-random-direction-within-a-cone/182936#182936
            float phi = (k4.z * 2 * PI) - PI;
            float theta = k4.w * light.angle;
            dirToLight = normalize(sin(theta) * (cos(phi) * t1 + sin(phi) * t2) + cos(theta) * dirToLight);
        }
    }
#endif
#if RECT_LIGHT_COUNT > 0
    else
    {
        uint lightIndex = min(uint(k4.y * RECT_LIGHT_COUNT), RECT_LIGHT_COUNT - 1);

        RectLight light = rectLights[lightIndex];

        // TODO: solid angle sampling
        vec2 sampleOnRect = (k4.zw - vec2(0.5)) * vec2(light.width, light.height);
        vec3 samplePos = light.origin + vec3(sampleOnRect, 0.0) * light.direction;
        vec3 dir = samplePos - surfacePos;

        dist = length(dir);
        dirToLight = dir / dist;
        // https://graphics.cg.uni-saarland.de/courses/ris-2021/slides/03_ProbabilityTheory_MonteCarlo.pdf s.35
        float geometryTerm = max(0.0, (dot(light.direction, -dirToLight))) / (dist * dist);
        power = light.baseEmission * PC.lightIntensityMultiplier * geometryTerm;
        pdf = 1.0 / (light.width * light.height);
    }
#endif

    pdf /= float(totalLightCount);
}

void main()
{
    /* 1. Get hit info. */
    vec2 hit_bc = baryCoord;
    uint hit_face_idx = gl_InstanceCustomIndexEXT + gl_PrimitiveID;
    float hit_t = gl_HitTEXT;

    /* 2. Set up shading state. */
    State shading_state; // Shading_state_material
    setup_mdl_shading_state(hit_face_idx, hit_bc, shading_state);

    // we keep a copy of the normal here since it can be changed within the state by *_init() functions:
    // https://github.com/NVIDIA/MDL-SDK/blob/aa9642b2546ad7b6236b5627385d882c2ed83c5d/examples/mdl_sdk/dxr/content/mdl_hit_programs.hlsl#L411
    const vec3 normal = shading_state.normal;

    vec3 throughput = vec3(rayPayload.throughput);
    vec3 radiance = vec3(rayPayload.radiance);

    uint bounce = (rayPayload.bitfield & 0x7FFFu);
    bool inside = bool(rayPayload.bitfield & 0x8000u);

    const bool thin_walled = mdl_thin_walled(shading_state);
    const float ior1 = (inside && !thin_walled) ? BSDF_USE_MATERIAL_IOR : 1.0;
    const float ior2 = (inside && !thin_walled) ? 1.0 : BSDF_USE_MATERIAL_IOR;

#if AOV_ID == AOV_ID_DEBUG_OPACITY
#ifdef IS_OPAQUE
    rayPayload.radiance = f16vec3(1.0, 0.0, 0.0); // Distinct from viridis heatmap
    rayPayload.bitfield = uint16_t(0xFFFFu);
#else
    // Payload fields have been set in any-hit shader.
#endif
    return;
#elif AOV_ID == AOV_ID_NORMAL
    rayPayload.radiance = f16vec3((normal + vec3(1.0, 1.0, 1.0)) * 0.5);
    rayPayload.bitfield = uint16_t(0xFFFFu);
    return;
#elif AOV_ID == AOV_ID_DEBUG_TANGENTS
    rayPayload.radiance = f16vec3((shading_state.tangent_u[0] + vec3(1.0, 1.0, 1.0)) * 0.5);
    rayPayload.bitfield = uint16_t(0xFFFFu);
    return;
#elif AOV_ID == AOV_ID_DEBUG_BITANGENTS
    rayPayload.radiance = f16vec3((shading_state.tangent_v[0] + vec3(1.0, 1.0, 1.0)) * 0.5);
    rayPayload.bitfield = uint16_t(0xFFFFu);
    return;
#elif AOV_ID == AOV_ID_DEBUG_BARYCENTRICS
    rayPayload.radiance = f16vec3(1.0 - hit_bc.x - hit_bc.y, hit_bc.x, hit_bc.y);
    rayPayload.bitfield = uint16_t(0xFFFFu);
    return;
#elif AOV_ID == AOV_ID_DEBUG_TEXCOORDS
    rayPayload.radiance = f16vec3(shading_state.text_coords[0]);
    rayPayload.bitfield = uint16_t(0xFFFFu);
    return;
#endif

    /* 3. Apply volume attenuation */
    if (inside && !thin_walled)
    {
        vec3 abs_coeff = mdl_absorption_coefficient(shading_state);
        throughput.x *= float16_t(abs_coeff.x > 0.0 ? exp(-abs_coeff.x * hit_t) : 1.0);
        throughput.y *= float16_t(abs_coeff.y > 0.0 ? exp(-abs_coeff.y * hit_t) : 1.0);
        throughput.z *= float16_t(abs_coeff.z > 0.0 ? exp(-abs_coeff.z * hit_t) : 1.0);
    }

    /* 4. Add Emission */
    {
        Edf_evaluate_data edf_evaluate_data;
        edf_evaluate_data.k1 = -gl_WorldRayDirectionEXT;
        mdl_edf_emission_init(shading_state);
        mdl_edf_emission_evaluate(edf_evaluate_data, shading_state);

        if (edf_evaluate_data.pdf > 0.0)
        {
            vec3 emission_intensity = mdl_edf_emission_intensity(shading_state);
            radiance += throughput * edf_evaluate_data.edf * emission_intensity;
        }
    }

    // reassign normal, see declaration of variable.
    shading_state.normal = normal;

    // init once and share between *_evaluate and *_sample calls
    mdl_bsdf_scattering_init(shading_state);

    /* 5. NEE light sampling */
#ifdef NEXT_EVENT_ESTIMATION
#if SPHERE_LIGHT_COUNT > 0
    if (!inside)
    {
        // Sample light source
#ifdef RAND_4D
        vec4 k4 = rng4d_next(rayPayload.rng_state);
#else
        vec4 k4 = vec3(
            rng_next(rayPayload.rng_state),
            rng_next(rayPayload.rng_state),
            rng_next(rayPayload.rng_state),
            rng_next(rayPayload.rng_state)
        );
#endif

        vec3 dirToLight;
        float lightDist;
        vec3 lightPower;
        float lightPdf;
        sampleLight(k4, shading_state.position, dirToLight, lightDist, lightPower, lightPdf);

        vec3 neeContrib = vec3(0.0);
        bool neeValid = (lightDist > 0.0) && dot(dirToLight, shading_state.geom_normal) > 0.0;

        // Calc unshadowed light contribution
        if (neeValid)
        {
            Bsdf_evaluate_data bsdf_eval_data;
            bsdf_eval_data.ior1 = vec3(ior1);
            bsdf_eval_data.ior2 = vec3(ior2);
            bsdf_eval_data.k1 = -gl_WorldRayDirectionEXT;
            bsdf_eval_data.k2 = dirToLight;
            mdl_bsdf_scattering_evaluate(bsdf_eval_data, shading_state);

            neeValid = (bsdf_eval_data.pdf > 0.0);

            if (neeValid)
            {
                vec3 neeRadiance = lightPower / lightPdf;

                vec3 weight = throughput * neeRadiance;
                neeContrib += weight * bsdf_eval_data.bsdf_diffuse;
                neeContrib += weight * bsdf_eval_data.bsdf_glossy;
            }
        }

        rayPayload.neeToLight = dirToLight * lightDist;
        rayPayload.neeContrib = neeContrib;
    }
#endif
#endif

    /* 6. Russian Roulette */
#ifdef RAND_4D
    float k1 = rng4d_next(rayPayload.rng_state).x;
#else
    float k1 = rng_next(rayPayload.rng_state);
#endif

    uint maxBounces = PC.maxBouncesAndRrBounceOffset >> 16;
    uint rrBounceOffset = PC.maxBouncesAndRrBounceOffset & 0xFFFFu;

    bool terminatePath = false;
    if (bounce == maxBounces - 1)
    {
        terminatePath = true;
    }
    else if (bounce > rrBounceOffset)
    {
        terminatePath = russian_roulette(k1, throughput);
    }

    /* 7. BSDF (importance) sampling. */
    if (!terminatePath)
    {
        // reassign normal, see declaration of variable.
        shading_state.normal = normal;

        Bsdf_sample_data bsdf_sample_data;
        bsdf_sample_data.ior1 = vec3(ior1);
        bsdf_sample_data.ior2 = vec3(ior2);
        bsdf_sample_data.k1 = -gl_WorldRayDirectionEXT;
#ifdef RAND_4D
        bsdf_sample_data.xi = rng4d_next(rayPayload.rng_state);
#else
        bsdf_sample_data.xi[0] = rng_next(rayPayload.rng_state);
        bsdf_sample_data.xi[1] = rng_next(rayPayload.rng_state);
        bsdf_sample_data.xi[2] = rng_next(rayPayload.rng_state);
        bsdf_sample_data.xi[3] = rng_next(rayPayload.rng_state);
#endif
        mdl_bsdf_scattering_sample(bsdf_sample_data, shading_state);

        terminatePath = (bsdf_sample_data.event_type == BSDF_EVENT_ABSORB);

        bool isTransmission = (bsdf_sample_data.event_type & BSDF_EVENT_TRANSMISSION) != 0;
        if (isTransmission)
        {
            inside = !inside;
        }

        throughput *= bsdf_sample_data.bsdf_over_pdf;

        rayPayload.ray_dir = bsdf_sample_data.k2;
        rayPayload.ray_origin = offset_ray_origin(shading_state.position, shading_state.geom_normal * (isTransmission ? -1.0 : 1.0));
    }

    uint bitfield = (uint(inside) << 15) | (bounce + 1);
    rayPayload.bitfield = uint16_t(terminatePath ? 0xFFFFu : bitfield);
    rayPayload.throughput = f16vec3(throughput);
    rayPayload.radiance = f16vec3(radiance);
}
